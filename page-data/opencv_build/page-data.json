{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/opencv_build/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Ingyerlog v2"}},"mdx":{"id":"e1cf3ddc-7dbe-5c18-b128-fbec539ee94c","excerpt":"CUDA를 OpenCV에서 사용하기 위해서는 별도로 빌드해야 한다.\n다음은 그 방법이다. 적당한 디렉토리 생성(e.g. opencv_build) git clone  https://github.com/opencv/opencv.git git clone  https://github.com…","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"OpenCV 빌드 및 파이썬에 설치\",\n  \"etc\": \"정보\",\n  \"description\": \"OpenCV 빌드 및 파이썬에 설치\",\n  \"year\": null,\n  \"organization\": null,\n  \"level\": null,\n  \"subject\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"CUDA\\uB97C OpenCV\\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD558\\uAE30 \\uC704\\uD574\\uC11C\\uB294 \\uBCC4\\uB3C4\\uB85C \\uBE4C\\uB4DC\\uD574\\uC57C \\uD55C\\uB2E4.\\n\\uB2E4\\uC74C\\uC740 \\uADF8 \\uBC29\\uBC95\\uC774\\uB2E4.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC801\\uB2F9\\uD55C \\uB514\\uB809\\uD1A0\\uB9AC \\uC0DD\\uC131(e.g. opencv_build)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"git clone \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/opencv/opencv.git\"\n  }, \"https://github.com/opencv/opencv.git\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"git clone \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/opencv/opencv_contrib.git\"\n  }, \"https://github.com/opencv/opencv_contrib.git\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"CUDA \\uC124\\uCE58\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"CUDNN \\uB2E4\\uC6B4\\uB85C\\uB4DC\\uD558\\uC5EC C:\", \"\\\\\", \"Program Files\", \"\\\\\", \"NVIDIA GPU Computing Toolkit\", \"\\\\\", \"CUDA\", \"\\\\\", \"(CUDA \\uBC84\\uC804)\", \"\\\\\", \" \\uB514\\uB809\\uD1A0\\uB9AC\\uC5D0 \\uC800\\uC7A5\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"CMake \\uBC0F Visual Studio \\uC124\\uCE58\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"opencv_contrib \\uC548\\uC758 modules\\uB97C opencv \\uC548\\uC73C\\uB85C \\uBCF5\\uC0AC\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC544\\uB798 \\uBA85\\uB839\\uC5B4 \\uC2E4\\uD589\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"C:\\\\Program Files\\\\CMake\\\\bin\\\\cmake.exe\\\" -B(opencv_build \\uACBD\\uB85C)/opencv/build -H(opencv_build \\uACBD\\uB85C)/opencv -GNinja -DCMAKE_BUILD_TYPE=Release  ^\\n-DINSTALL_TESTS=ON -DINSTALL_C_EXAMPLES=ON -DBUILD_EXAMPLES=ON ^\\n-DBUILD_opencv_world=ON ^\\n-DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR=\\\"C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/(CUDA \\uBC84\\uC804)\\\" -DCUDA_FAST_MATH=ON -DWITH_CUBLAS=ON -DCUDA_ARCH_BIN=8.6(\\uAC01\\uC790 \\uD655\\uC778 \\uD544\\uC694) -DWITH_NVCUVID=ON ^\\n-DWITH_OPENGL=ON ^\\n-DWITH_MFX=ON ^\\n-DBUILD_opencv_python3=ON ^\\n-DCMAKE_EXE_LINKER_FLAGS=/NODEFAULTLIB:libcmt.lib\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"python (opencv_build \\uACBD\\uB85C)/opencv/build/python_loader/setup.py build\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"python (opencv_build \\uACBD\\uB85C)/opencv/build/python_loader/setup.py install\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"python\\uC5D0\\uC11C import cv2 \\uD558\\uAE30 \\uC804\\uC5D0 os.add_dll_directory(\\u201CC:\", \"\\\\\", \"Program Files\", \"\\\\\", \"NVIDIA GPU Computing Toolkit\", \"\\\\\", \"CUDA\", \"\\\\\", \"(CUDA \\uBC84\\uC804)\", \"\\\\\", \"bin\\u201D) \\uC2E4\\uD589\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uADF8\\uAC8C \\uC2EB\\uB2E4\\uBA74 C:\\\\Users\\\\USER\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\opencv-4.8.0-py3.11.egg\\\\cv2\", \"_\", \"_\", \"init\", \"_\", \"_\", \".py \\uB0B4\\uC5D0 \\uC704 \\uBA85\\uB839 \\uCD94\\uAC00\")), mdx(\"p\", null, \"\\uC704\\uB97C \\uAC70\\uCE58\\uC9C0 \\uC54A\\uC73C\\uBA74 \\uBAA8\\uB4C8\\uC744 \\uCC3E\\uC9C0 \\uBABB\\uD558\\uACA0\\uB2E4\\uB294 dll \\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD55C\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"OpenCV 빌드 및 파이썬에 설치","year":null,"description":"OpenCV 빌드 및 파이썬에 설치","etc":"정보","organization":null,"level":null,"subject":null},"fields":{"haspdf":"n"}},"previous":{"fields":{"slug":"/License/"},"frontmatter":{"title":"저작권"}},"next":{"fields":{"slug":"/Notice/"},"frontmatter":{"title":"블로그 재구축 안내"}}},"pageContext":{"id":"e1cf3ddc-7dbe-5c18-b128-fbec539ee94c","previousPostId":"f8bd55b0-f337-572d-8d94-c66441ba445a","nextPostId":"c00dd6b6-67a4-574c-afc0-18b4598d4fa8"}},
    "staticQueryHashes": ["3000541721","3274528899"]}